//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace mtcmoscow { namespace SensorHub { namespace Temperature {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ITemperatureService. Instead, TemperatureServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class TemperatureServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ITemperatureService
{
public:
    // Method Invocation Events
    // Property Read Events
    event Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureGetCelsiusRequestedEventArgs^>^ GetCelsiusRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureGetCelsiusRequestedEventArgs^>^ handler) 
        { 
            return _GetCelsiusRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<TemperatureServiceEventAdapter^>(sender), safe_cast<TemperatureGetCelsiusRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetCelsiusRequested -= token; 
        } 
    internal: 
        void raise(TemperatureServiceEventAdapter^ sender, TemperatureGetCelsiusRequestedEventArgs^ args) 
        { 
            _GetCelsiusRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureGetFahrenheitsRequestedEventArgs^>^ GetFahrenheitsRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureGetFahrenheitsRequestedEventArgs^>^ handler) 
        { 
            return _GetFahrenheitsRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<TemperatureServiceEventAdapter^>(sender), safe_cast<TemperatureGetFahrenheitsRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetFahrenheitsRequested -= token; 
        } 
    internal: 
        void raise(TemperatureServiceEventAdapter^ sender, TemperatureGetFahrenheitsRequestedEventArgs^ args) 
        { 
            _GetFahrenheitsRequested(sender, args);
        } 
    }

    // Property Write Events
    event Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureSetCelsiusRequestedEventArgs^>^ SetCelsiusRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureSetCelsiusRequestedEventArgs^>^ handler) 
        { 
            return _SetCelsiusRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<TemperatureServiceEventAdapter^>(sender), safe_cast<TemperatureSetCelsiusRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetCelsiusRequested -= token; 
        } 
    internal: 
        void raise(TemperatureServiceEventAdapter^ sender, TemperatureSetCelsiusRequestedEventArgs^ args) 
        { 
            _SetCelsiusRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureSetFahrenheitsRequestedEventArgs^>^ SetFahrenheitsRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<TemperatureServiceEventAdapter^, TemperatureSetFahrenheitsRequestedEventArgs^>^ handler) 
        { 
            return _SetFahrenheitsRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<TemperatureServiceEventAdapter^>(sender), safe_cast<TemperatureSetFahrenheitsRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetFahrenheitsRequested -= token; 
        } 
    internal: 
        void raise(TemperatureServiceEventAdapter^ sender, TemperatureSetFahrenheitsRequestedEventArgs^ args) 
        { 
            _SetFahrenheitsRequested(sender, args);
        } 
    }

    // ITemperatureService Implementation

    virtual Windows::Foundation::IAsyncOperation<TemperatureGetCelsiusResult^>^ GetCelsiusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<TemperatureGetFahrenheitsResult^>^ GetFahrenheitsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<TemperatureSetCelsiusResult^>^ SetCelsiusAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double value);
    virtual Windows::Foundation::IAsyncOperation<TemperatureSetFahrenheitsResult^>^ SetFahrenheitsAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ double value);

private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetCelsiusRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetFahrenheitsRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetCelsiusRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetFahrenheitsRequested;
};

} } } } 
